snippet defn^ "Defn with meta" b
(defn${1: ^$2} ${3:name}
  "${4:docstring}"
  [${5:arg}]
  $0)
endsnippet

snippet defn "Defn" b
(defn ${1:name}
  "${2:docstring}"
  [${3:arg}]
  $0)
endsnippet

snippet comm "Comment block"
(comment
  $0)
endsnippet

snippet condp "codp block"
(condp ${1:pred} ${2:expr}
  ${0})
endsnippet

snippet def "def" b
(def ${1:name} ${0:val})
endsnippet

snippet defm "Define method" b
(defmethod ${1:multifn}
  "${2:doc-string}" 
  ${3:dispatch-val} 
  [${4:args}]
  ${0})
endsnippet

snippet defmm "define multi" b
(defmulti ${1:name} 
  "${2:doc-string}" 
  ${0:dispatch-fn})
endsnippet

snippet defma "Define macros" b
(defmacro ${1:name} 
  "${2:doc-string}" 
  ${0:dispatch-fn})
endsnippet

snippet defp "Define protocol" b
(defprotocol ${1:name}
  ${0})
endsnippet

snippet defr "Define record" b
(defrecord ${1:name} 
  [${2:fields}]
  ${3:protocol}
  ${0})
endsnippet

snippet deft "Define test" b
	(deftest ${1:name}
		(is (= ${0:assertion})))
endsnippet

snippet iseq "is eq in test"
(is (= ${1} ${0}))
endsnippet

snippet defty "Define type" b
(deftype ${1:Name} 
  [${2:fields}]
  ${3:Protocol}
  ${0})
endsnippet

snippet doseq "doseq"
(doseq [${1:elem} ${2:coll}]
  ${0})
endsnippet

snippet fn "Lambda"
(fn [${1:arg-list}] ${0})
endsnippet

snippet if "if"
(if ${1:test-expr}
  ${2:then-expr}
  ${0:else-expr})
endsnippet

snippet if-let "If-let"
(if-let [${1:result} ${2:test-expr}]
  (${3:then-expr} $1)
  (${0:else-expr}))
endsnippet

snippet imp "import in namespace"
(:import [${1:package} $0])
endsnippet

snippet let "let"
(let [${1:name} ${2:expr}
  ${0})
endsnippet

snippet map "Map"
(map ${1:func} ${0:coll})
endsnippet

snippet mapl "Map with one line fun"
(map #(${1:lambda}) ${0:coll})
endsnippet

snippet met 
(${1:name} [${2:this} ${3:args}]
  ${0})
endsnippet

snippet ns "namespace" b
(ns ${0:name})
endsnippet

snippet refer "Refer in namespace"
(:refer-clojure :exclude [${0}])
endsnippet

snippet require "Require in namespace"
(:require [${1:namespace} :as [${0}]])
endsnippet


snippet print "Println"
(println ${0})
endsnippet

snippet reduce "reduce"
(reduce ${1:(fn [p n] ${3})} ${2})
endsnippet

snippet when "When"
(when ${1:test} ${0:body})
endsnippet

snippet when-let "whenlet"
(when-let [${1:result} ${2:test}]
  ${0:body})
endsnippet

